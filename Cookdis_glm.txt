
Cookdis_glm <- function(fit.model, xlab, ylab, main, pch, col, identify, out){
	if(class(fit.model)[1] != "glm" & class(fit.model)[1] != "lm" & class(fit.model)[1] != "negbin") 
	  stop("Only lm-, glm- and glm.nb-type objects are supported!!",call.=FALSE)
	if(missingArg(out)) out <- FALSE   
	X <- model.matrix(fit.model)
	n <- nrow(X)
	p <- ncol(X)
	if(class(fit.model)[1] == "glm"){
	  if(any(fit.model$prior.weights == 0)) stop("Only positive values of weights are allowed!!",call.=FALSE)	
	  w <- fit.model$weights
	  if(fit.model$family$family=="poisson" & sd(fit.model$prior.weights)>0)
	    stop("The option weights are not allowed for poisson family!!",call.=FALSE)
	}
	if(class(fit.model)[1] == "negbin"){
	  if(any(fit.model$prior.weights == 0)) stop("Only positive values of weights are allowed!!",call.=FALSE)
	  if(sd(fit.model$prior.weights)>0)
		stop("The option weights are not allowed for negative binomial family!!",call.=FALSE)
	  w <- fit.model$weights
	}
	if(class(fit.model)[1] == "lm"){
	  if(any(fit.model$weights == 0)) stop("Only positive values of weights are allowed!!",call.=FALSE)
	  if(is.null(fit.model$weights)) w <- matrix(1,n,1) else w <- fit.model$weights
	}
	Xw <- X*matrix(sqrt(w),n,p)
	salida <- svd(Xw)
	h <- apply(salida$u^2,1,sum)
	if(class(fit.model)[1] == "glm"){
	  ts <- resid(fit.model,type="pearson")
	  phi <- (n-p)/sum(ts^2)
	  if(fit.model$family$family=="poisson" || fit.model$family$family=="binomial") phi <- 1
	  td <- resid(fit.model,type="pearson")*sqrt(phi/(1-h))
	}
	if(class(fit.model)[1] == "negbin"){
	  td <- resid(fit.model,type="pearson")*sqrt(1/(1-h))
	}        
	if(class(fit.model)[1] == "lm"){
		ts <- resid(fit.model)
        phi <- (n-p)/sum(ts^2*w)
		td <- resid(fit.model)*sqrt(phi*w/(1-h))
	}
  dc <- (h/(1-h))*(td^2)
  if(missingArg(xlab))  xlab="Index"
  if(missingArg(ylab))  ylab="Cook distance"
  if(missingArg(main))  main=" "
  if(missingArg(pch))   pch=20
  if(missingArg(col))   col="black"
  plot(dc, xlab=xlab, ylab=ylab, main=main, pch=pch, col=col, type="h")
  if(!missingArg(identify)) identify(dc, n=identify)
  if(out) return(stat=dc)
}