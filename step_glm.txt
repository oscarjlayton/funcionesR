step_glm <- function(fit.model, criterion, direction, test, level){
       oldw <- getOption("warn")
	   options(warn = -1)
	   if(class(fit.model)[1] != "glm" & class(fit.model)[1] != "lm" & class(fit.model)[1] != "negbin" & class(fit.model)[1] != "gee") 
	   stop("Only lm-, glm-, negbin- and gee-type objects are supported!!",call.=FALSE)
 	   if(missingArg(criterion)) criterion <- ifelse(class(fit.model)[1] == "gee","qic","bic")
 	   if(missingArg(direction)) direction <- "backward"
 	   if(missingArg(test)) test <- "Wald" else test="likelihood-ratio"
	   if(direction!="forward" & direction!="backward")
	   stop("Only backward and forward directions are supported!!",call.=FALSE)
	   criterion <- tolower(criterion)
	   if(class(fit.model)[1] == "lm" &
	     criterion!="aic" & criterion!="bic" & criterion!="press" & criterion!="p.value" & criterion!="adjr2" & criterion!="cp") 
	   stop("Only AIC, BIC, adjusted R-square, PRESS, CP and p-value criteria are supported for lm-type objects!!",call.=FALSE)
	   if(class(fit.model)[1] == "glm" &
	     criterion!="aic" & criterion!="bic" & criterion!="adjr2d" & criterion!="adjr2p" & criterion!="p.value") 
	   stop("Only AIC, BIC, adjusted R-square based on residual deviance, adjusted R-square based on Pearson statistic,
	         and p-value criteria are supported for glm-type objects!!",call.=FALSE)
	   if(class(fit.model)[1] == "negbin" & criterion!="aic" & criterion!="bic" & criterion!="p.value") 
	   stop("Only AIC, BIC and p-value criteria are supported for negbin-type objects!!",call.=FALSE)
	   if(class(fit.model)[1] == "gee" & criterion!="qic" & criterion!="p.value") 
	   stop("Only QIC and p-value criteria are supported for gee-type objects!!",call.=FALSE)
	   if(missingArg(level)) level <- 0.05 else level <- min(max(0.01,abs(level)),0.5)
	   if(class(fit.model)[1] != "gee") datas <- na.omit(get_all_vars(fit.model,eval(fit.model$call$data)))
	   out <- function(fitt,names.effets){
			   left <- lapply(as.list(strsplit(attr(fitt$terms,"term.labels"),":",fixed=TRUE)),function(x) paste(sort(x),collapse=":"))
			   right <- lapply(as.list(strsplit(names.effets,":",fixed=TRUE)),function(x) paste(sort(x),collapse=":"))
			   !(left %in% right)
	   }
	   constr.formula <- function(fitt,inter,term,action){
		   if(missingArg(term)) names.effects <- attr(fitt$terms,"term.labels")
		   else{if(action=="-") names.effects <- attr(fitt$terms,"term.labels")[attr(fitt$terms,"term.labels")!=term]
		       else names.effects <- c(attr(fitt$terms,"term.labels"),term)}   
		   if(length(names.effects)>0)
		   paste(attr(fitt$terms,"variables")[2],ifelse(inter,"~ 1 +","~ 0 +"),paste(names.effects,collapse=" + "))
		   else paste(attr(fitt$terms,"variables")[2],ifelse(inter,"~ 1 ","~ 0 "))
	   }
	   lmstats <- function(fitt){
	              if(is.null(fitt$weights)) weights <- matrix(1,length(fitt$residuals),1) else weights <- fitt$weights
				  r2 <- 1 - (sum(weights*fitt$residuals^2)/fitt$df.residual)/denr2
				  X <- model.matrix(fitt)
			      if(length(X)!=0){
				      sigma2 <- sum(weights*fitt$residuals^2)/fitt$df.residual
		       	      Xw <- X*matrix(sqrt(weights),nrow(X),ncol(X))
					  salida <- svd(Xw)
	                  h <- apply(salida$u^2,1,sum)
			          press <- sum((resid(fitt)*sqrt(weights)/(1-h))^2)/nrow(X)
		   	      }else{sigma2 <- sum(resid(fitt)^2)/fitt$df.residual
				  		press <- sigma2}
				  c(AIC(fitt),BIC(fitt),r2,press,fitt$df.residual*(sigma2/sigma20-1) + ncol(X))
	   }
	   p.values <- function(fitt,i,num.effects){
	             if(missingArg(num.effects)) num.effects <- attr(model.matrix(fitt),"assign")
	           	 p.value <- t(coef(fitt)[num.effects==i])%*%solve(vcov(fitt)[num.effects==i,num.effects==i])%*%coef(fitt)[num.effects==i]
				 p.value <- 1 - pf(p.value/sum(num.effects==i),sum(num.effects==i),fitt$df.residual)
				 p.value
	   }
	   glmstats <- function(fitt){
					 if(inter || fitt$family$family=="gaussian"){
					   r21 <- 1 - (fitt$deviance/fitt$df.residual)/denr2
	                   r22 <- 1 - (sum(resid(fitt,type="pearson")^2)/fitt$df.residual)/denr22}
					 else{
					   r21 <- fitt$deviance/fitt$df.residual
	                   r22 <- sum(resid(fitt,type="pearson")^2)/fitt$df.residual}
					 out <- c(AIC(fitt),BIC(fitt),r21,r22)
	   			   out
	   }		   
	   p.values2 <- function(fitt,i,num.effects){
				 if(class(fitt)[1] != "gee"){
				   if(missingArg(num.effects)) num.effects <- attr(model.matrix(fitt),"assign")
		           p.value <- t(coef(fitt)[num.effects==i])%*%solve(vcov(fitt)[num.effects==i,num.effects==i])%*%coef(fitt)[num.effects==i]
				   if(fitt$family$family=="gaussian" & fitt$family$link=="identity")
					 p.value <- 1 - pf(p.value/sum(num.effects==i),sum(num.effects==i),fitt$df.residual)
				   else p.value <- 1 - pchisq(p.value,sum(num.effects==i))  
				 }else{if(missingArg(num.effects)) num.effects <- attr(model.matrix(as.formula(fitt$call$formula),m),"assign")
				       p.value <- t(coef(fitt)[num.effects==i])%*%solve(fitt$robust.variance[num.effects==i,num.effects==i])%*%coef(fitt)[num.effects==i]
				       p.value <- 1 - pchisq(p.value,sum(num.effects==i))}
				 p.value
	   }
	   quiet <- function(x){ 
                sink(tempfile()) 
                on.exit(sink()) 
                invisible(force(suppressMessages(x)))
	   }
	   QIC <- function(fitt,m,d){
		   etas <- fitt$linear.predictors
		   fitx0 <- glm(as.formula(paste(attr(fitt$terms,"variables")[2]," ~ -1 + offset(etas)")), family=fitt$family, data=m)
		   w <- sqrt(fitx0$weights)
		   phi_hat0 <- sum(resid(fitx0,type="pearson")^2)/(length(fitt$y)-length(coef(fitt)))
		   X <- model.matrix(as.formula(fitt$call$formula),m)
		   Xw <- matrix(w,nrow(X),ncol(X))*X
		   vcov.0 <- solve(t(Xw)%*%Xw)
		   phi_hat <- fitt$scale
	       if(d) phi_hat0 <- phi_hat
		   if(tolower(fitt$model$varfun)=="gaussian") qll <- -(1/2)*(fitt$y - fitted(fitt))^2
		   if(tolower(fitt$model$varfun)=="binomial") qll <- fitx0$prior.weights*(fitx0$y*log(fitted(fitt)) + (1-fitx0$y)*log(1-fitted(fitt)))
		   if(tolower(fitt$model$varfun)=="poisson") qll <- fitt$y*log(fitted(fitt)) - fitted(fitt)
		   if(tolower(fitt$model$varfun)=="gamma") qll <- -fitt$y/fitted(fitt) - log(fitted(fitt))
		   if(tolower(fitt$model$varfun)=="inverse.gaussian") qll <- (fitted(fitt) - (1/2)*fitt$y)/(fitted(fitt))^2
		   QIC <- as.matrix(-2*sum(qll)/phi_hat + 2*sum(diag(solve(vcov.0*phi_hat0)%*%fitt$robust.variance)))
		   QIC
		}
	   tol <- TRUE
	   count <- 0
	   inter <- ifelse(length(coef(fit.model))>0,names(coef(fit.model))[1]=="(Intercept)",FALSE)
	   oldformula <- constr.formula(fit.model,inter)
	   if(direction=="forward") oldformula <- constr.formula(fit.model,inter,term=attr(fit.model$terms,"term.labels"),action="-")
	   ps <- ifelse(criterion=="p.value",FALSE,TRUE)
	   if(class(fit.model)[1] == "lm"){
	       fit.x <- fit.model
	       if(is.null(fit.model$weights)) weights <- matrix(1,length(fit.model$residuals),1) else weights <- fit.model$weights
		   if(is.null(fit.model$offset)) offset <- matrix(0,length(fit.model$residuals),1) else offset <- fit.model$offset
		   if(inter) fit.null <- lm(fit.model$model[,1] ~ 1, offset=offset, weights=weights)
		   else  fit.null <- lm(fit.model$model[,1] ~ 0, offset=offset, weights=weights)
		   denr2 <- sum(resid(fit.null)^2*weights)/fit.null$df.residual
		   sigma20 <- sum(resid(fit.model)^2*weights)/fit.model$df.residual
		   if(direction=="forward") fit.x <- eval(parse(text=paste("lm(",oldformula,", offset=offset, weights=weights, data=datas)")))
		   cat("\nInitial model:\n")
		   cat(oldformula,"\n")
		   newformula <- oldformula
		   sale <- " "
		   names.col <- c("Df","AIC  ","BIC  ","R-squared*","PRESS+","CP**","p-value")
		   if(criterion=="p.value") names.col[7] <- "p-value^"
		   delta <- c(1,1,1,-1,1,1,-1)
		   id0 <-  c(" ","aic","bic","adjr2","press","cp","p.value")==criterion
	       if(direction=="forward") delta <- c(1,1,1,-1,1,1,1)
		   
		   while(tol){
				if(length(attr(fit.x$terms,"term.labels"))==0) names.effects <- "" else names.effects <- attr(fit.x$terms,"term.labels")
				if(length(attr(model.matrix(fit.x),"assign"))==0) num.effects <- 0 else num.effects <- attr(model.matrix(fit.x),"assign")
				if(direction=="backward"){
				    results <- matrix(NA,max(num.effects)+1,7)
				    if(criterion=="p.value") results[1,ncol(results)] <- -1
				    if(count == 0) results[1,2:6] <- lmstats(fit.x) else results[1,2] <- 0
					s <- attr(fit.x$terms,"factors")
					for(i in 1:length(names.effects)){
					   if(all(apply(as.matrix(s[,-i]*s[,i]),2,sum) < sum(s[,i]))){
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="-")
						 fit0 <- eval(parse(text=paste("lm(",formula0,", offset=offset, weights=weights, data=datas)")))
					   	 results[i+1,1] <- fit0$df.residual - fit.x$df.residual
					   	 results[i+1,2:6] <- lmstats(fit0)
					   	 results[i+1,7] <- p.values(fit.x,i,num.effects)
					   }	
					}
					names.effects <- cbind("-",names.effects)
				}
				if(direction=="forward"){
				  outs <- out(fit.model,names.effects)
				  s2 <- as.matrix(attr(fit.model$terms,"factors")[,outs])
				  names.effects <- attr(fit.model$terms,"term.labels")[outs]
				  results <- matrix(NA,length(names.effects)+1,7)
				  if(criterion=="p.value") results[1,ncol(results)] <- 1
				  if(count == 0) results[1,2:6] <- lmstats(fit.x) else results[1,2] <- 0
				  for(i in 1:length(names.effects)){
				     if(sum(apply(as.matrix(s2[,-i]),2,function(x) sum(s2[,i]*x)==sum(x)))==0){
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="+")
						 fit0 <- eval(parse(text=paste("lm(",formula0,", offset=offset, weights=weights, data=datas)")))
					   	 results[i+1,1] <- fit.x$df.residual - fit0$df.residual
					   	 results[i+1,2:6] <- lmstats(fit0)
					   	 results[i+1,7] <- p.values(fit0,max(num.effects) + 1)
					 }
				  }
				  names.effects <- cbind("+",names.effects)
				}
				shows <- !is.na(results[,2])
				results <- cbind(results[shows,1],results[shows,id0],results[shows,!id0])
				colnames(results) <- c(names.col[1],names.col[id0],names.col[!id0])
				results <- results[,-3]
				if(count > 0){
				  if(criterion=="p.value") results[1,-c(1,2)] <- recicla
				  else results[1,-c(1,7)] <- recicla
				}
				names.effects2 <- cbind(names.effects[shows[-1],1],names.effects[shows[-1],2])
				names.effects3 <- c("<none>",paste(names.effects2[,1],names.effects2[,2]))
				rownames(results) <- names.effects3
				ids <- min(results[,2]*delta[id0])==(results[,2]*delta[id0])
				if(sum(ids)>1) ids <- min(results[,3])==(results[,3])
	            cat("\nStep",count,": ",sale,"\n")
				indexes <- sort(results[,2]*delta[id0],index=TRUE)$ix
				if(criterion=="p.value"){
				   recicla <- results[names.effects3==names.effects3[ids],-c(1,2)]
				   if(direction=="backward") ps <- ifelse(max(results[,2]) > level,TRUE,FALSE)
				   if(direction=="forward") ps <- ifelse(min(results[,2]) < level,TRUE,FALSE)				   
				   results[names.effects3=="<none>",2] <- NA
				}else recicla <- results[names.effects3==names.effects3[ids],-c(1,7)]

				results2 <- cbind(results[,1],NA,results[,-1])
				colnames(results2) <- c(colnames(results)[1],"",colnames(results)[-1])
				printCoefmat(results2[indexes,],cs.ind=1,tst.ind=3:8,dig.tst=4,na.print=" ")			
				count <- count + 1
				if(names.effects3[ids]!="<none>" & ps==TRUE){
				  ids <- ids[-1]
				  sale <- paste(names.effects2[ids,1],names.effects2[ids,2])
				  newformula <- constr.formula(fit.x,inter,term=names.effects2[ids,2],action=names.effects2[ids,1])
				  if(nrow(names.effects)==1){
				    tol <- FALSE
					cat("\nStep",count,": ",sale,"\n")
				  }	
				  new <- paste("lm(",newformula,", offset=offset, weights=weights, data=datas)")
				  fit.x <- eval(parse(text=new))
				}else tol <- FALSE  
			}
			cat("\n*  Adjusted R-squared\n")
			cat("+  Allen's PRESS divided by the sample size\n")
			cat("** Mallows's CP\n")			
			if(criterion=="p.value" & direction=="backward") cat("^  Effects are dropped when their p-values are higher than",level)
			if(criterion=="p.value" & direction=="forward")  cat("^  Effects are included when their p-values are lower than",level)			
			cat("\n\nFinal model:\n")
			cat(newformula,"\n\n")
		}
	    if(class(fit.model)[1] == "glm"){
		   cat("\n  Family: ",fit.model$family$family,"\n")
		   cat("    Link: ",fit.model$family$link,"\n")
		   if(fit.model$family$family=="quasi"){
		     if(fit.model$family$varfun!="constant") cat("Variance:  proportional to",fit.model$family$varfun,"\n")
			 else cat("Variance: ",fit.model$family$varfun,"\n")
		   }	 
		   cat("\nInitial model:\n")
		   fit.x <- fit.model
		   if(direction=="forward") fit.x <- eval(parse(text=paste("glm(",oldformula,", weights=fit.model$prior.weights, offset=fit.model$offset, family=fit.model$family, data=datas)")))
		   cat(oldformula,"\n")
		   newformula <- oldformula
		   sale <- " "
		   inter <- ifelse(length(coef(fit.model))>0,names(coef(fit.model))[1]=="(Intercept)",FALSE)
		   if(fit.model$family$family=="quasi" || fit.model$family$family=="quasibinomial" || fit.model$family$family=="quasipoisson"){
		     quasi <- TRUE
			 if(missingArg(criterion)) criterion <- "adjr2p"
		   }else quasi <- FALSE	 
		   if(inter || fit.model$family$family=="gaussian"){
			 if(inter) fit.null <- glm(fit.model$y ~ 1, family=fit.model$family, offset=fit.model$offset, weights=fit.model$prior.weights)
			 else fit.null <- glm(fit.model$y ~ 0, family=fit.model$family, offset=fit.model$offset, weights=fit.model$prior.weights)
			 denr2  <- fit.null$deviance/fit.null$df.residual
	         denr22 <- sum(resid(fit.null,type="pearson")^2)/fit.null$df.residual
		   }
		   if(!inter & direction=="forward")
		     stop("The forward variable selection and non-intercept models are not compatible!!",call.=FALSE)
		   names.col <- c("Df","AIC  ","BIC  ","Deviance+","Pearson^","p-value*")
		   delta <- c(1,1,1,-1,-1,-1)
		   id0 <-  c(" ","aic","bic","adjr2d","adjr2p","p.value")==criterion
		   if(!inter) delta <- c(1,1,1,1,1,-1)
		   if(direction=="forward") delta[6] <- 1
		   while(tol){
				if(length(attr(fit.x$terms,"term.labels"))==0) names.effects <- "" else names.effects <- attr(fit.x$terms,"term.labels")
				if(length(attr(model.matrix(fit.x),"assign"))==0) num.effects <- 0 else num.effects <- attr(model.matrix(fit.x),"assign")

				if(direction=="backward"){
					results <- matrix(NA,max(num.effects)+1,6)
					if(criterion=="p.value") results[1,ncol(results)] <- -1
					if(count == 0) results[1,2:(ncol(results)-1)] <- glmstats(fit.x) else results[1,ifelse(quasi,4,2)] <- 0
					s <- attr(fit.x$terms,"factors")
					for(i in 1:max(num.effects)){
					   if(all(apply(as.matrix(s[,-i]*s[,i]),2,sum) < sum(s[,i]))){
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="-")
						 fit0 <- try(eval(parse(text=paste("glm(",formula0,", weights=fit.x$prior.weights, offset=fit.x$offset, family=fit.x$family, data=datas)"))),silent=TRUE)
						 if(!is.list(fit0))	fit0 <- eval(parse(text=paste("glm(",formula0,", weights=fit.x$prior.weights, offset=fit.x$offset, family=fit.x$family, data=datas, mustart=fitted(fit.x))")))
						 results[i+1,1] <- fit0$df.residual - fit.x$df.residual
					   	 results[i+1,2:5] <- glmstats(fit0)
					   	 results[i+1,6] <- ifelse(test=="Wald",p.values2(fit.x,i,num.effects),anova(fit0,fit.x,test="LRT")[[5]][2])
					   }	
					}
					names.effects <- cbind("-",names.effects)
				}
				if(direction=="forward"){
				  outs <- out(fit.model,names.effects)
				  s2 <- as.matrix(attr(fit.model$terms,"factors")[,outs])
				  names.effects <- attr(fit.model$terms,"term.labels")[outs]
				  results <- matrix(NA,length(names.effects)+1,6)
				  if(criterion=="p.value") results[1,ncol(results)] <- 1
				  if(count == 0) results[1,2:(ncol(results)-1)] <- glmstats(fit.x) else results[1,ifelse(quasi,4,2)] <- 0
				  for(i in 1:length(names.effects)){
				     if(sum(apply(as.matrix(s2[,-i]),2,function(x) sum(s2[,i]*x)==sum(x)))==0){ 
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="+")
						 fit0 <- try(eval(parse(text=paste("glm(",formula0,", weights=fit.x$prior.weights, offset=fit.x$offset, family=fit.x$family, data=datas)"))),silent=TRUE)
						 if(!is.list(fit0))	fit0 <- eval(parse(text=paste("glm(",formula0,", weights=fit.x$prior.weights, offset=fit.x$offset, family=fit.x$family, data=datas, mustart=fitted(fit.x))")))
						 results[i+1,1] <- fit.x$df.residual - fit0$df.residual
					   	 results[i+1,2:5] <- glmstats(fit0)
					   	 results[i+1,6] <- ifelse(test=="Wald",p.values2(fit0,max(num.effects) + 1),anova(fit.x,fit0,test="LRT")[[5]][2])
					 }
				  }
				  names.effects <- cbind("+",names.effects)
				}
				if(quasi) shows <- !is.na(results[,4]) else shows <- !is.na(results[,2])
				results <- cbind(results[shows,1],results[shows,id0],results[shows,!id0])
				colnames(results) <- c(names.col[1],names.col[id0],names.col[!id0])
				if(quasi) results <- results[,-c(3,4,5)] else results <- results[,-3]
				if(count > 0){
				  if(criterion=="p.value") results[1,-c(1,2)] <- recicla
				  else results[1,-c(1,ifelse(quasi,4,6))] <- recicla 
				}
				names.effects2 <- cbind(names.effects[shows[-1],1],names.effects[shows[-1],2])
				names.effects3 <- c("<none>",paste(names.effects2[,1],names.effects2[,2]))
				rownames(results) <- names.effects3
				ids <- min(results[,2]*delta[id0])==(results[,2]*delta[id0])
				if(sum(ids)>1) ids <- min(results[,3])==(results[,3])
	            cat("\nStep",count,": ",sale,"\n")
				indexes <- sort(results[,2]*delta[id0],index=TRUE)$ix
				if(criterion=="p.value"){
				   recicla <- results[names.effects3==names.effects3[ids],-c(1,2)]
				   if(direction=="backward") ps <- ifelse(max(results[,2]) > level,TRUE,FALSE)
				   if(direction=="forward") ps <- ifelse(min(results[,2]) < level,TRUE,FALSE)				   
				   results[names.effects3=="<none>",2] <- NA
				}else recicla <- results[names.effects3==names.effects3[ids],-c(1,ncol(results))]
				if(quasi) tst.ind <- 3:5  else tst.ind <- 3:7
				results2 <- cbind(results[,1],NA,results[,-1])
				colnames(results2) <- c(colnames(results)[1],"",colnames(results)[-1])
				printCoefmat(results2[indexes,],cs.ind=1,tst.ind=tst.ind,dig.tst=4,na.print=" ")
				count <- count + 1
				if(names.effects3[ids]!="<none>" & ps==TRUE){
				  ids <- ids[-1]
				  sale <- paste(names.effects2[ids,1],names.effects2[ids,2])
				  newformula <- constr.formula(fit.x,inter,term=names.effects2[ids,2],action=names.effects2[ids,1])
				  if(nrow(names.effects)==1){
				    tol <- FALSE
					cat("\nStep",count,": ",sale,"\n")
				  }	
				  new <- paste("glm(",newformula,", weights=fit.x$prior.weights, offset=fit.x$offset, family=fit.x$family, data=datas)")
				  fit.x <- eval(parse(text=new))
				}else tol <- FALSE  
			}
			if(inter || fit.model$family$family=="gaussian"){
			  cat("\n+ Adjusted R-squared based on the residual deviance")
			  cat("\n^ Adjusted R-squared based on the Pearson statistic")
			}else{
			  cat("\n+ Deviance-based estimate of the dispersion parameter")
			  cat("\n^ Pearson's-based estimate of the dispersion parameter")
			}
			cat("\n* p-value of the",test,"test")
			if(criterion=="p.value" & direction=="backward") cat(" ( effects are dropped when their p-values are higher than",level,")")
			if(criterion=="p.value" & direction=="forward")  cat(" ( effects are included when their p-values are lower than",level,")")			
			cat("\n\nFinal model:\n")
			cat(newformula,"\n\n")
        }
		if(class(fit.model)[1] == "negbin"){
		   cat("\nFamily: Negative Binomial \n")
		   cat("  Link:",fit.model$family$link,"\n")
		   cat("\nInitial model:\n")
		   fit.x <- fit.model
		   if(is.null(fit.model$offset)) offset <- matrix(0,length(fit.model$residuals),1)
		   assign("links", fit.model$family$link, envir = .GlobalEnv)
		   if(direction=="forward") fit.x <- eval(parse(text=paste("glm.nb(",oldformula,"+offset(offset),weights=fit.x$prior.weights,link=links,data=datas)")))
		   inter <- ifelse(length(coef(fit.model))>0,names(coef(fit.model))[1]=="(Intercept)",FALSE)
		   if(!inter & direction=="forward")
		     stop("The forward variable selection and non-intercept models are not compatible!!",call.=FALSE)
		   cat(oldformula,"\n")
		   newformula <- oldformula
		   sale <- " "
		   names.col <- c("Df","AIC  ","BIC  ","p-value*")
		   delta <- c(1,1,1,-1)
		   id0 <-  c(" ","aic","bic","p.value")==criterion
		   if(direction=="forward") delta <- c(1,1,1,1)

		   while(tol){
				if(length(attr(fit.x$terms,"term.labels"))==0) names.effects <- "" else names.effects <- attr(fit.x$terms,"term.labels")
				if(length(attr(model.matrix(fit.x),"assign"))==0) num.effects <- 0 else num.effects <- attr(model.matrix(fit.x),"assign")

				if(direction=="backward"){
					results <- matrix(NA,length(names.effects)+1,4)
					if(criterion=="p.value") results[1,ncol(results)] <- -1
					if(count == 0) results[1,2:3] <- c(AIC(fit.x),BIC(fit.x)) else results[1,2] <- 0
					s <- attr(fit.x$terms,"factors")
					for(i in 1:length(names.effects)){
					   if(all(apply(as.matrix(s[,-i]*s[,i]),2,sum) < sum(s[,i]))){
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="-")
						 formula0 <- paste(formula0,"+ offset(offset)")
						 fit0 <- eval(parse(text=paste("glm.nb(",formula0,", weights=fit.x$prior.weights, link=links, data=datas)")))
					   	 results[i+1,1] <- fit0$df.residual - fit.x$df.residual
					   	 results[i+1,2:3] <- c(AIC(fit0),BIC(fit0))
					   	 results[i+1,4] <- ifelse(test=="Wald",p.values2(fit.x,i,num.effects),anova(fit.x,fit0)[[8]][2])
					   }	
					}
					names.effects <- cbind("-",names.effects)
				}
				if(direction=="forward"){
					outs <- out(fit.model,names.effects)
					s2 <- as.matrix(attr(fit.model$terms,"factors")[,outs])
					names.effects <- attr(fit.model$terms,"term.labels")[outs]
					results <- matrix(NA,length(names.effects)+1,4)
					if(criterion=="p.value") results[1,4] <- 1
					if(count == 0) results[1,2:3] <- c(AIC(fit.x),BIC(fit.x)) else results[1,2] <- 0
					  for(i in 1:length(names.effects)){
					     if(sum(apply(as.matrix(s2[,-i]),2,function(x) sum(s2[,i]*x)==sum(x)))==0){ 
							 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="+")
						     formula0 <- paste(formula0,"+ offset(offset)")
						     fit0 <- eval(parse(text=paste("glm.nb(",formula0,", weights=fit.x$prior.weights, link=links, data=datas)")))
						   	 results[i+1,1] <- fit.x$df.residual - fit0$df.residual
						   	 results[i+1,2:3] <- c(AIC(fit0),BIC(fit0))
						   	 results[i+1,4] <- ifelse(test=="Wald",p.values2(fit0,max(num.effects) + 1),anova(fit.x,fit0)[[8]][2])
						 }
					  }
					  names.effects <- cbind("+",names.effects)
				}
				shows <- !is.na(results[,2])
				results <- cbind(results[shows,1],results[shows,id0],results[shows,!id0])
				colnames(results) <- c(names.col[1],names.col[id0],names.col[!id0])
				results <- results[,-3]
				if(count > 0){
				  if(criterion=="p.value") results[1,-c(1,2)] <- recicla
				  else results[1,-c(1,4)] <- recicla 
				}
				names.effects2 <- cbind(names.effects[shows[-1],1],names.effects[shows[-1],2])
				names.effects3 <- c("<none>",paste(names.effects2[,1],names.effects2[,2]))
				rownames(results) <- names.effects3
				ids <- min(results[,2]*delta[id0])==(results[,2]*delta[id0])
				if(sum(ids)>1) ids <- min(results[,3])==(results[,3])
	            cat("\nStep",count,": ",sale,"\n")
				indexes <- sort(results[,2]*delta[id0],index=TRUE)$ix
				if(criterion=="p.value"){
				   recicla <- results[names.effects3==names.effects3[ids],-c(1,2)]
				   if(direction=="backward") ps <- ifelse(max(results[,2]) > level,TRUE,FALSE)
				   if(direction=="forward") ps <- ifelse(min(results[,2]) < level,TRUE,FALSE)				   
				   results[names.effects3=="<none>",2] <- NA
				}else recicla <- results[names.effects3==names.effects3[ids],-c(1,4)]
				
				results2 <- cbind(results[,1],NA,results[,-1])
				colnames(results2) <- c(colnames(results)[1],"",colnames(results)[-1])
				printCoefmat(results2[indexes,],cs.ind=1,tst.ind=c(3,4,5),dig.tst=4,na.print=" ")			
				count <- count + 1
				if(names.effects3[ids]!="<none>" & ps==TRUE){
				  ids <- ids[-1]
				  sale <- paste(names.effects2[ids,1],names.effects2[ids,2])
				  newformula <- constr.formula(fit.x,inter,term=names.effects2[ids,2],action=names.effects2[ids,1])
				  newformula <- paste(newformula,"+ offset(offset)")
				  if(nrow(names.effects)==1){
				    tol <- FALSE
					cat("\nStep",count,": ",sale,"\n")
				  }	
 				  new <- paste("glm.nb(",newformula,", weights=fit.x$prior.weights, link=links, data=datas)")
				  fit.x <- eval(parse(text=new))
				}else tol <- FALSE  
			}
			cat("\n* p-value of the",test,"test")
			if(criterion=="p.value" & direction=="backward") cat(" ( effects are dropped when their p-values are higher than",level,")")
			if(criterion=="p.value" & direction=="forward")  cat(" ( effects are included when their p-values are lower than",level,")")			
			cat("\n\nFinal model:\n")
			cat(gsub("+ offset(offset)","",newformula,fixed=TRUE),"\n\n")
		}
	    if(class(fit.model)[1] == "gee"){
		   cat("\nVariance to Mean Relation: ",fit.model$model$varfun,"\n")
		   cat("                     Link: ",fit.model$family$link,"\n")
		   cat("    Correlation Structure: ",fit.model$model$corstr)
		   if(fit.model$model$corstr=="stat_M_dep" || fit.model$model$corstr=="non_stat_M_dep" || fit.model$model$corstr=="AR-M")
		   cat(", M =",fit.model$model$M,"\n") else cat("\n")
		   cat("\nInitial model:\n")
		   callnano <- fit.model$call
		   a <- grepl("offset",attr(fit.model$terms,"predvars"))
		   offset <- attr(fit.model$terms,"predvars")[a]
		   nano <- gsub(" ","",unlist(strsplit(deparse(fit.model$call),",")),fixed=TRUE)
		   b <- grepl("data",nano)
		   c <- grepl("subset",nano)
		   if(any(b)) datas <- sub("data=","",nano[b],fixed=TRUE) else datas <- "parent.frame()"
		   if(any(c)){
		     subsets <- sub("))",")",sub("subset=","",nano[c],fixed = TRUE),fixed = TRUE)
 		     m <- eval(parse(text=paste("get_all_vars(fit.model,data=subset(",datas,",subset=",subsets,")")))
		   }else m <- eval(parse(text=paste("get_all_vars(fit.model,data=",datas,")")))
		   m <- na.omit(m)
		   d <- any(grepl("scale.fix=TRUE",gsub(" ","",fit.model$call)))
		   fit.x <- fit.model
		   oldformula2 <- ifelse(any(a),paste(oldformula,"+",offset),oldformula)
		   callnano$formula <- as.formula(oldformula2)
		   if(direction=="forward") fit.x <- quiet(eval(callnano))
		   cat(oldformula,"\n")
		   newformula <- oldformula
		   sale <- " "
		   inter <- ifelse(length(coef(fit.model))>0,names(coef(fit.model))[1]=="(Intercept)",FALSE)
		   if(!inter & direction=="forward") stop("The forward variable selection and non-intercept models are not compatible!!",call.=FALSE)
		   newformula <- oldformula
		   sale <- " "
		   names.col <- c("Df","QIC  ","p-value")
		   delta <- c(1,1,-1)
		   id0 <-  c(" ","qic","p.value")==criterion
		   if(direction=="forward") delta <- c(1,1,1)
		   
		   while(tol){
				if(length(attr(fit.x$terms,"term.labels"))==0) names.effects <- "" else names.effects <- attr(fit.x$terms,"term.labels")
				if(length(attr(model.matrix(as.formula(fit.x$call$formula),m),"assign"))==0) num.effects <- 0 else num.effects <- attr(model.matrix(as.formula(fit.x$call$formula),m),"assign")

				if(direction=="backward"){
					results <- matrix(NA,length(names.effects)+1,3)
					if(criterion=="p.value") results[1,ncol(results)] <- -1
					if(count == 0) results[1,2] <- QIC(fit.x,m,d) else results[1,2] <- 0
					s <- attr(fit.x$terms,"factors")
					for(i in 1:length(names.effects)){
					   if(all(apply(as.matrix(s[,-i]*s[,i]),2,sum) < sum(s[,i]))){
						 formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="-")
						 formula01 <- ifelse(any(a),paste(formula0,"+",offset),formula0)
		                 callnano$formula <- as.formula(formula01)
						 fit0 <- quiet(eval(callnano))
					   	 results[i+1,1] <- length(coef(fit.x)) - length(coef(fit0))
					   	 results[i+1,2] <- QIC(fit0,m,d)
					   	 results[i+1,3] <- p.values2(fit.x,i,num.effects)
					   }	
					}
					names.effects <- cbind("-",names.effects)
				}
				if(direction=="forward"){
					outs <- out(fit.model,names.effects)
					s2 <- as.matrix(attr(fit.model$terms,"factors")[,outs])
					names.effects <- attr(fit.model$terms,"term.labels")[outs]
					results <- matrix(NA,length(names.effects)+1,3)
					if(criterion=="p.value") results[1,3] <- 1
					if(count == 0) results[1,2] <- QIC(fit.x,m,d) else results[1,2] <- 0
					  for(i in 1:length(names.effects)){
					     if(sum(apply(as.matrix(s2[,-i]),2,function(x) sum(s2[,i]*x)==sum(x)))==0){ 
						   formula0 <- constr.formula(fit.x,inter,term=names.effects[i],action="+")
						   formula01 <- ifelse(any(a),paste(formula0,"+",offset),formula0)
		                   callnano$formula <- as.formula(formula01)
						   fit0 <- quiet(eval(callnano))
						   results[i+1,1] <- length(coef(fit0)) - length(coef(fit.x))
						   results[i+1,2] <- QIC(fit0,m,d)
						   results[i+1,3] <- p.values2(fit0,max(num.effects) + 1)
						 }
					  }
					  names.effects <- cbind("+",names.effects)
				}
				shows <- !is.na(results[,2])
				results <- cbind(results[shows,1],results[shows,id0],results[shows,!id0])
				colnames(results) <- c(names.col[1],names.col[id0],names.col[!id0])
				results <- results[,-3]
				if(count > 0){
				  if(criterion=="p.value") results[1,-c(1,2)] <- recicla
				  else results[1,-c(1,3)] <- recicla 
				}
				names.effects2 <- cbind(names.effects[shows[-1],1],names.effects[shows[-1],2])
				names.effects3 <- c("<none>",paste(names.effects2[,1],names.effects2[,2]))
				rownames(results) <- names.effects3
				ids <- min(results[,2]*delta[id0])==(results[,2]*delta[id0])
				if(sum(ids)>1) ids <- min(results[,3])==(results[,3])
	            cat("\nStep",count,": ",sale,"\n")
				indexes <- sort(results[,2]*delta[id0],index=TRUE)$ix
				if(criterion=="p.value"){
				   recicla <- results[names.effects3==names.effects3[ids],-c(1,2)]
				   if(direction=="backward") ps <- ifelse(max(results[,2]) > level,TRUE,FALSE)
				   if(direction=="forward") ps <- ifelse(min(results[,2]) < level,TRUE,FALSE)				   
				   results[names.effects3=="<none>",2] <- NA
				}else recicla <- results[names.effects3==names.effects3[ids],-c(1,3)]
				
				results2 <- cbind(results[,1],NA,results[,-1])
				colnames(results2) <- c(colnames(results)[1],"",colnames(results)[-1])
				printCoefmat(results2[indexes,],cs.ind=1,tst.ind=c(3,4),dig.tst=4,na.print=" ")			
				count <- count + 1
				if(names.effects3[ids]!="<none>" & ps==TRUE){
				  ids <- ids[-1]
				  sale <- paste(names.effects2[ids,1],names.effects2[ids,2])
				  newformula <- constr.formula(fit.x,inter,term=names.effects2[ids,2],action=names.effects2[ids,1])
				  newformula1 <- ifelse(any(a),paste(newformula,"+",offset),newformula)
		          callnano$formula <- as.formula(newformula1)
				  if(nrow(names.effects)==1){
				    tol <- FALSE
					cat("\nStep",count,": ",sale,"\n")
				  }	
				  fit.x <- quiet(eval(callnano))
				}else tol <- FALSE  
			}
			if(criterion=="p.value" & direction=="backward") cat(" Effects are dropped when their p-values are higher than",level)
			if(criterion=="p.value" & direction=="forward")  cat(" Effects are included when their p-values are lower than",level)			
			cat("\n\nFinal model:\n")
			cat(newformula,"\n\n")
		}
		options(warn = oldw)
}







